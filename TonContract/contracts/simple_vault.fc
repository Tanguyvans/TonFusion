#include "imports/stdlib.fc";

const int op::deposit = 0x1;
const int op::withdraw = 0x2;
const int op::get_balance = 0x3;

const int error::insufficient_funds = 100;
const int error::access_denied = 101;
const int error::invalid_amount = 102;

global slice storage::owner_address;
global int storage::total_balance;

() load_data() impure {
    slice ds = get_data().begin_parse();
    storage::owner_address = ds~load_msg_addr();
    storage::total_balance = ds~load_coins();
}

() save_data() impure {
    set_data(begin_cell()
        .store_slice(storage::owner_address)
        .store_coins(storage::total_balance)
        .end_cell());
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }
    
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        return ();
    }
    
    slice sender_address = cs~load_msg_addr();
    
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);
    
    load_data();
    
    if (op == op::deposit) {
        int deposit_amount = msg_value - 50000000;
        throw_unless(error::invalid_amount, deposit_amount > 0);
        
        storage::total_balance += deposit_amount;
        save_data();
        
        var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(sender_address)
            .store_coins(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(0x1234, 32)
            .store_uint(query_id, 64)
            .end_cell();
        
        send_raw_message(msg, 64);
        return ();
    }
    
    if (op == op::withdraw) {
        throw_unless(error::access_denied, equal_slices(sender_address, storage::owner_address));
        
        int withdraw_amount = in_msg_body~load_coins();
        throw_unless(error::insufficient_funds, withdraw_amount <= storage::total_balance);
        throw_unless(error::invalid_amount, withdraw_amount > 0);
        
        storage::total_balance -= withdraw_amount;
        save_data();
        
        var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(sender_address)
            .store_coins(withdraw_amount)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(0x1235, 32)
            .store_uint(query_id, 64)
            .end_cell();
        
        send_raw_message(msg, 1);
        return ();
    }
    
    throw(0xffff);
}

(slice, int) get_vault_data() method_id {
    load_data();
    return (storage::owner_address, storage::total_balance);
}

int get_vault_balance() method_id {
    load_data();
    return storage::total_balance;
}