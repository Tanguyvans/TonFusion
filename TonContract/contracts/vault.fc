#include "imports/stdlib.fc";
#include "jetton/params.fc";
#include "jetton/op-codes.fc";
#include "jetton/discovery-params.fc";
#include "jetton/jetton-utils.fc";
#include "vault/codes.fc";
#include "vault/storage.fc";
#include "vault/utils.fc";

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    slice sender_address = cs~load_msg_addr();
    cs~load_msg_addr(); ;; skip dst
    cs~load_coins(); ;; skip value
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee
    int fwd_fee = muldiv(cs~load_coins(), 3, 2); ;; we use message fwd_fee for estimation of forward_payload costs

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    load_storage();

    if (op == op::register_deposit()) {
        ;; コントラクトが停止中かチェック
        throw_unless(er::vault_is_stopped(), storage::stopped != -1);
        
        ;; クエリーID、ユーザーアドレスを取得
        slice user_address = in_msg_body~load_msg_addr();
        
        ;; ガス計算 - register_depositオペレーション自体のみ
        int required_gas = gas_basic_processing_consumption() + ;;（0.005 TON）
                         gas_storage_load_consumption() + ;;（0.005 TON）
                         gas_dict_update_consumption() + ;;（0.005 TON）
                         gas_storage_save_consumption(); ;;（0.005 TON）合計: 0.02 TON
        
        ;; 必要なガス量を確保
        throw_unless(er::insufficient_gas(), msg_value >= required_gas);
    
        ;; クエリーIDに紐づく情報を登録（ユーティリティ関数で統一）
        update_swaps_info(query_id, user_address, 0, 0, 0, now());
        
        save_storage();
        return ();
    }

    if (op == op::change_vault_data()) {
        throw_unless(er::not_admin(), equal_slices(sender_address, storage::admin_address));
        storage::stopped = in_msg_body~load_bool();
        storage::dict_swaps_info = in_msg_body~load_dict();
        save_storage();
        return ();
    }

    if (op == op::send_admin_message()) {
        throw_unless(er::not_admin(), equal_slices(sender_address, storage::admin_address));
        cell msg_cell = in_msg_body~load_ref();
        int send_mode = in_msg_body~load_uint(8);
        send_raw_message(msg_cell, send_mode);
        return ();
    }

    if (op == op::change_code_and_data()) {
        throw_unless(er::not_admin(), equal_slices(sender_address, storage::admin_address));
        cell code_cell = in_msg_body~load_ref();
        cell data_cell = in_msg_body~load_ref();
        set_code(code_cell);
        set_data(data_cell);
        return ();
    }

    if (op == op::change_admin()) {
        throw_unless(er::not_admin(), equal_slices(sender_address, storage::admin_address));
        storage::admin_address = in_msg_body~load_msg_addr();
        save_storage();
        return ();
    }

    if (op == op::change_content()) {
        throw_unless(er::not_admin(), equal_slices(sender_address, storage::admin_address));
        storage::content = in_msg_body~load_ref();
        save_storage();
        return ();
    }

    if (op == op::provide_wallet_address()) {
        throw_unless(er::discovery_fee_not_matched(), msg_value > fwd_fee + provide_address_gas_consumption());

        slice owner_address = in_msg_body~load_msg_addr();
        int include_address? = in_msg_body~load_uint(1);

        cell included_address = include_address?
            ? begin_cell().store_slice(owner_address).end_cell()
            : null();

        var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(sender_address)
            .store_coins(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(op::take_wallet_address(), 32)
            .store_uint(query_id, 64);

        if (is_resolvable?(owner_address)) {
            msg = msg.store_slice(calculate_user_jetton_wallet_address(owner_address, my_address(), storage::jetton_wallet_code));
        } else {
            msg = msg.store_uint(0, 2); ;; addr_none
        }
        send_raw_message(msg.store_maybe_ref(included_address).end_cell(), 64);
        return ();
    }

    throw(er::wrong_op());
}

(int, int, slice, cell, cell) get_jetton_data() method_id {
    load_storage();
    return (
        storage::total_supply, 
        -1, 
        storage::admin_address, 
        storage::content, 
        storage::jetton_wallet_code
    );
}

slice get_wallet_address(slice admin_address) method_id {
    load_storage();
    return calculate_user_jetton_wallet_address(
        admin_address,
        my_address(),
        storage::jetton_wallet_code
    );
}

(int, cell) get_vault_data() method_id {
    load_storage();
    return (
        storage::stopped,
        storage::dict_swaps_info
    );
}

;; クエリIDの詳細情報を取得するデバッグ用getter
(int, slice, int, int, int, int) get_query_info_debug(int query_id) method_id {
    load_storage();
    (slice user_address, int index_amount, int received_excesses, int excess_gas, int timestamp) = load_swaps_info(query_id);
    int found = ~ equal_slices(user_address, addr_none());
    return (
        found,
        user_address,
        index_amount,
        received_excesses,
        excess_gas,
        timestamp
    );
}