global int storage::total_supply;
global slice storage::admin_address;
global cell storage::content;
global cell storage::jetton_wallet_code;

global int storage::stopped;
global slice storage::jetton_master;
global slice storage::jetton_wallet;
global cell storage::dict_swaps_info; ;; SwapsInfoID(64-bit) -> (ethereum_user:160, ton_user:MsgAddress, amount:coins, deadline:64, status:2)

() load_storage() impure inline {
    slice ds = get_data().begin_parse();
    cell jetton = ds~load_ref();
    slice sj = jetton.begin_parse();
    storage::total_supply = sj~load_coins();
    storage::admin_address = sj~load_msg_addr();
    storage::content = sj~load_ref();
    storage::jetton_wallet_code = sj~load_ref();
    storage::stopped = ds~load_bool();
    storage::jetton_master = ds~load_msg_addr();
    storage::jetton_wallet = ds~load_msg_addr();
    
    ;; Load SwapsInfoID details
    if (~ ds.slice_empty?()) {
        storage::dict_swaps_info = ds~load_dict();
    } else {
        storage::dict_swaps_info = new_dict(); ;; udict_* functions compatible initialization
    }
}

() save_storage() impure inline {
    cell jetton = begin_cell()
        .store_coins(storage::total_supply)
        .store_slice(storage::admin_address)
        .store_ref(storage::content)
        .store_ref(storage::jetton_wallet_code)
        .end_cell();
    cell data = begin_cell()
        .store_ref(jetton)
        .store_bool(storage::stopped)
        .store_slice(storage::jetton_master)
        .store_slice(storage::jetton_wallet)
        .store_dict(storage::dict_swaps_info)
        .end_cell();
    set_data(data);
}