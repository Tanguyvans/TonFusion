{"version":3,"sources":["/Users/paul-n/git/ston-fi/public/sdk-contracts/packages/sdk/dist/chunk-T2VR2AUP.cjs","../src/helpers.ts"],"names":[],"mappings":"AAAA;AACE;AACF,wDAA6B;AAC7B;AACA;ACSO,SAAS,UAAA,CAAW,MAAA,EAGxB;AACD,EAAA,MAAM,EAAE,YAAA,EAAc,aAAa,EAAA,EAAI,MAAA;AAEvC,EAAA,GAAA,CAAI,aAAA,IAAiB,EAAA,GAAK,aAAA,IAAiB,CAAA,EAAG;AAC5C,IAAA,OAAO,qBAAA,CAAI,EAAA;AAAA,EACb;AAEA,EAAA,GAAA,CAAI,aAAA,IAAiB,EAAA,GAAK,aAAA,IAAiB,CAAA,EAAG;AAC5C,IAAA,OAAO,qBAAA,CAAI,IAAA;AAAA,EACb;AAEA,EAAA,GAAA,CAAI,aAAA,IAAiB,EAAA,GAAK,aAAA,IAAiB,CAAA,EAAG;AAC5C,IAAA,OAAO,qBAAA,CAAI,IAAA;AAAA,EACb;AAEA,EAAA,MAAM,IAAI,KAAA,CAAM,CAAA,yBAAA,EAA4B,YAAY,CAAA,CAAA,EAAI,YAAY,CAAA,CAAA;AAC1E;AAa8B;AAC5B,EAAA;AACA,EAAA;AACA,EAAA;AAKC;AAC2D,EAAA;AAEhC,EAAA;AAC9B;AD/B2E;AACA;AACA;AACA;AACA","file":"/Users/paul-n/git/ston-fi/public/sdk-contracts/packages/sdk/dist/chunk-T2VR2AUP.cjs","sourcesContent":[null,"import { DEX } from \"./contracts/dex\";\nimport type { AddressType } from \"./types\";\n\n/**\n * Returns a set of DEX contracts for the given version of the router.\n * Useful for defining the set of contracts based on the API information about the router.\n * Throws if the version is not supported.\n *\n * @param {number} param0.majorVersion - The major version of the router.\n * @param {number} param0.minorVersion - The minor version of the router.\n *\n * @returns The set of contracts for the given version.\n */\nexport function dexFactory(config: {\n  majorVersion: number;\n  minorVersion: number;\n}) {\n  const { majorVersion, minorVersion } = config;\n\n  if (majorVersion === 1 && minorVersion === 0) {\n    return DEX.v1;\n  }\n\n  if (majorVersion === 2 && minorVersion === 1) {\n    return DEX.v2_1;\n  }\n\n  if (majorVersion === 2 && minorVersion === 2) {\n    return DEX.v2_2;\n  }\n\n  throw new Error(`Unsupported dex version: ${majorVersion}.${minorVersion}`);\n}\n\n/**\n * Returns an instance of the router contract for the given version and address.\n * Useful for creating a router based on the API information about the router.\n * Throws if the version is not supported.\n *\n * @param {Address | string} param0.address - The address of the router.\n * @param {number} param0.majorVersion - The major version of the router.\n * @param {number} param0.minorVersion - The minorVersion version of the router.\n *\n * @returns {Router} The instance of the router contract.\n */\nexport function routerFactory({\n  address,\n  majorVersion,\n  minorVersion,\n}: {\n  address: AddressType;\n  majorVersion: number;\n  minorVersion: number;\n}) {\n  const { Router } = dexFactory({ majorVersion, minorVersion });\n\n  return Router.create(address);\n}\n"]}