import { PtonV2_1 } from './contracts/pTON/v2_1/PtonV2_1.js';
import { VaultV2_1 } from './contracts/dex/v2_1/vault/VaultV2_1.js';
import { LpAccountV2_1 } from './contracts/dex/v2_1/LpAccount/LpAccountV2_1.js';
import { PoolV2_1 } from './contracts/dex/v2_1/pool/PoolV2_1.js';
import { RouterV2_1 } from './contracts/dex/v2_1/router/RouterV2_1.js';
import { PtonV1 } from './contracts/pTON/v1/PtonV1.js';
import { LpAccountV1 } from './contracts/dex/v1/LpAccountV1.js';
import { PoolV1 } from './contracts/dex/v1/PoolV1.js';
import { RouterV1 } from './contracts/dex/v1/RouterV1.js';
import { AddressType } from './types.js';
import '@ton/ton';
import './contracts/pTON/AbstractPton.js';
import './contracts/pTON/constants.js';
import './contracts/core/Contract.js';
import './contracts/dex/constants.js';
import './contracts/dex/v2_1/pool/BasePoolV2_1.js';
import './contracts/core/JettonMinter.js';
import './contracts/core/JettonWallet.js';
import './contracts/dex/v2_1/pool/CPIPoolV2_1.js';
import './contracts/dex/v2_1/pool/StablePoolV2_1.js';
import './contracts/dex/v2_1/router/BaseRouterV2_1.js';
import './contracts/dex/v2_1/router/CPIRouterV2_1.js';
import './contracts/dex/v2_1/router/StableRouterV2_1.js';

/**
 * Returns a set of DEX contracts for the given version of the router.
 * Useful for defining the set of contracts based on the API information about the router.
 * Throws if the version is not supported.
 *
 * @param {number} param0.majorVersion - The major version of the router.
 * @param {number} param0.minorVersion - The minor version of the router.
 *
 * @returns The set of contracts for the given version.
 */
declare function dexFactory(config: {
    majorVersion: number;
    minorVersion: number;
}): {
    readonly Router: typeof RouterV1;
    readonly Pool: typeof PoolV1;
    readonly LpAccount: typeof LpAccountV1;
    readonly pTON: typeof PtonV1;
} | {
    readonly Router: typeof RouterV2_1;
    readonly Pool: typeof PoolV2_1;
    readonly LpAccount: typeof LpAccountV2_1;
    readonly Vault: typeof VaultV2_1;
    readonly pTON: typeof PtonV2_1;
};
/**
 * Returns an instance of the router contract for the given version and address.
 * Useful for creating a router based on the API information about the router.
 * Throws if the version is not supported.
 *
 * @param {Address | string} param0.address - The address of the router.
 * @param {number} param0.majorVersion - The major version of the router.
 * @param {number} param0.minorVersion - The minorVersion version of the router.
 *
 * @returns {Router} The instance of the router contract.
 */
declare function routerFactory({ address, majorVersion, minorVersion, }: {
    address: AddressType;
    majorVersion: number;
    minorVersion: number;
}): RouterV1 | RouterV2_1;

export { dexFactory, routerFactory };
