#include "imports/stdlib.fc";
#include "jetton/params.fc";
#include "jetton/op-codes.fc";
#include "jetton/discovery-params.fc";
#include "jetton/jetton-utils.fc";
#include "vault/codes.fc";
#include "vault/storage.fc";
#include "vault/utils.fc";

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    slice sender_address = cs~load_msg_addr();
    cs~load_msg_addr(); ;; skip dst
    cs~load_coins(); ;; skip value
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee
    int fwd_fee = muldiv(cs~load_coins(), 3, 2); ;; we use message fwd_fee for estimation of forward_payload costs

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    load_storage();

    if (op == op::register_deposit()) {
        ;; Check if the contract is stopped
        throw_unless(er::vault_is_stopped(), storage::stopped != -1);
        
        ;; Calculate gas - register_deposit operation only
        int required_gas = gas_basic_processing_consumption() + ;;（0.005 TON）
                gas_storage_load_consumption() +      ;;（0.005 TON）
                gas_dict_update_consumption() +       ;;（0.005 TON）
                gas_storage_save_consumption();       ;;（0.005 TON）: Total: 0.02 TON

        ;; Check if the required gas is available
        throw_unless(er::insufficient_gas(), msg_value >= required_gas);
        
        ;; Get parameters
        slice swap_id = in_msg_body~load_bits(256);    ;; Swap ID (256 bits)
        int ethereum_user = in_msg_body~load_uint(160);  ;; Ethereum address (160-bit)
        slice ton_user = in_msg_body~load_msg_addr();    ;; TON address (MsgAddress)
        int amount = in_msg_body~load_coins();           ;; Amount to deposit
        int deadline = in_msg_body~load_uint(64);        ;; Deadline (UNIX timestamp)
        
        ;; Register SwapsInfoID with initial status=0 (init)
        update_swaps_info(query_id, swap_id, ethereum_user, ton_user, amount, now(), deadline, 0);
        
        save_storage();
        return ();
    }

    if (op == op::transfer_notification()) {
        ;; Check if the contract is stopped
        throw_unless(er::vault_is_stopped(), storage::stopped != -1);
        
        ;; Calculate gas 
        int required_gas = gas_basic_processing_consumption() + ;;（0.005 TON）
                gas_storage_load_consumption() +      ;;（0.005 TON）
                gas_dict_update_consumption() +       ;;（0.005 TON）
                gas_storage_save_consumption();       ;;（0.005 TON）: Total: 0.02 TON

        ;; Check if the required gas is available
        throw_unless(er::insufficient_gas(), msg_value >= required_gas);
        
        ;; Get parameters
        int amount = in_msg_body~load_coins();           ;; Amount to deposit
        slice sender_address = in_msg_body~load_msg_addr(); ;; address which sent jetton
        cell forward_payload = in_msg_body~load_maybe_ref(); ;; Skip custom_payload and get forward_payload
        cell custom_payload = in_msg_body~load_maybe_ref(); ;; Skip forward_payload and get custom_payload
        
        int ethereum_user = 0;
        slice ton_user = sender_address;  ;; Default to sender address if not provided
        int deadline = 0;
        
        ;; Parse forward_payload if it exists
        if (~ forward_payload.null?()) {
            slice payload_slice = forward_payload.begin_parse();
            int op_code = payload_slice~load_uint(32); ;; Check op_code
            
            if (op_code == op::register_deposit()) { ;; Only process if it's register_deposit
                slice swap_id = payload_slice~load_bits(256);    ;; Swap ID (256 bits)
                ethereum_user = payload_slice~load_uint(160);  ;; Ethereum address (160 bits)
                ton_user = payload_slice~load_msg_addr();      ;; TON address (MsgAddress)
                deadline = payload_slice~load_uint(64);        ;; Deadline (64 bits)
                
                ;; Only update storage if forward_payload is valid
                update_swaps_info(query_id, swap_id, ethereum_user, ton_user, amount, now(), deadline, 0);
                save_storage();
            }
        }
        return ();
    }
    
    if (op == op::withdraw_jetton()) {
        ;; Check if the contract is stopped
        throw_unless(er::vault_is_stopped(), storage::stopped != -1);

        ;; Calculate required gas
        int required_gas = gas_storage_load_consumption() + ;; 0.005 TON
                        gas_dict_update_consumption() + ;; 0.005 TON
                        gas_storage_save_consumption() + ;; 0.005 TON
                        gas_jetton_transfer_consumption(); ;; 0.05 TON Total: 0.065 TON
        
        ;; Check if the required gas is available
        throw_unless(er::insufficient_gas(), msg_value >= required_gas);
        
        ;; Load parameters
        slice to_address = in_msg_body~load_msg_addr();  ;; To address
        int amount = in_msg_body~load_coins();           ;; Amount
        
        ;; Check if swap exists
        (slice swap_id, int ethereum_user, slice ton_user, int stored_amount, int creation_timestamp, int deadline, int status) = load_swaps_info(query_id);
        throw_unless(er::invalid_swap_id(), ethereum_user != 0);
        throw_unless(er::invalid_swap_status(), status == 0);
        
        ;; Time validation and amount handling
        if (now() > deadline) {
            ;; After deadline: only ton_user can withdraw full amount
            throw_unless(er::unauthorized_withdrawal(), equal_slices(sender_address, ton_user));
            amount = stored_amount;  ;; Withdraw full amount
        } else {
            ;; Before deadline: normal validation
            throw_unless(er::invalid_swap_time(), now() >= creation_timestamp);
            throw_unless(er::invalid_swap_amount(), amount <= stored_amount);
        }
        
        ;; Create jetton transfer message body
        cell transfer_body = begin_cell()
            .store_uint(op::jetton_transfer(), 32)  ;; Jetton transfer operation code
            .store_uint(query_id, 64)               ;; query_id
            .store_coins(amount)                   ;; Amount
            .store_slice(to_address)               ;; To address
            .store_slice(sender_address)           ;; Response address
            .store_uint(0, 1)                      ;; custom_payload is empty
            .store_coins(0)                        ;; forward_ton_amount: 0 nanoTON
            .store_uint(0, 1)                      ;; forward_payload is empty
            .end_cell();
        
        ;; Jetton wallet message
        cell msg = begin_cell()
            .store_uint(0x18, 6)                  ;; Flag
            .store_slice(storage::jetton_wallet)   ;; Send to Vault's Jetton wallet
            .store_coins(gas_jetton_transfer_consumption())                       ;; Send TON amount (Jetton wallet pays for gas)
            .store_uint(1, 107)                   ;; Default value
            .store_ref(transfer_body)             ;; Transfer message body
            .end_cell();
        
        ;; Send message
        send_raw_message(msg, 1);  ;; Mode 1
        
        ;; Calculate new stored amount and status
        int new_stored_amount = stored_amount - amount;
        int new_status = status;
        if (new_stored_amount == 0) {
            new_status = 1;
        }
        ;; Update storage
        update_swaps_info(query_id, swap_id, ethereum_user, ton_user, new_stored_amount, creation_timestamp, deadline, new_status);
        save_storage();
        
        return ();
    }

    if (op == op::change_vault_data()) {
        throw_unless(er::not_admin(), equal_slices(sender_address, storage::admin_address));
        storage::stopped = in_msg_body~load_bool();
        storage::jetton_master = in_msg_body~load_msg_addr();
        storage::jetton_wallet = in_msg_body~load_msg_addr();
        storage::dict_swaps_info = in_msg_body~load_dict();
        save_storage();
        return ();
    }

    if (op == op::send_admin_message()) {
        throw_unless(er::not_admin(), equal_slices(sender_address, storage::admin_address));
        cell msg_cell = in_msg_body~load_ref();
        int send_mode = in_msg_body~load_uint(8);
        send_raw_message(msg_cell, send_mode);
        return ();
    }

    if (op == op::change_code_and_data()) {
        throw_unless(er::not_admin(), equal_slices(sender_address, storage::admin_address));
        cell code_cell = in_msg_body~load_ref();
        cell data_cell = in_msg_body~load_ref();
        set_code(code_cell);
        set_data(data_cell);
        return ();
    }

    if (op == op::change_admin()) {
        throw_unless(er::not_admin(), equal_slices(sender_address, storage::admin_address));
        storage::admin_address = in_msg_body~load_msg_addr();
        save_storage();
        return ();
    }

    if (op == op::change_content()) {
        throw_unless(er::not_admin(), equal_slices(sender_address, storage::admin_address));
        storage::content = in_msg_body~load_ref();
        save_storage();
        return ();
    }

    if (op == op::provide_wallet_address()) {
        throw_unless(er::discovery_fee_not_matched(), msg_value > fwd_fee + provide_address_gas_consumption());

        slice owner_address = in_msg_body~load_msg_addr();
        int include_address? = in_msg_body~load_uint(1);

        cell included_address = include_address?
            ? begin_cell().store_slice(owner_address).end_cell()
            : null();

        var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(sender_address)
            .store_coins(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(op::take_wallet_address(), 32)
            .store_uint(query_id, 64);

        if (is_resolvable?(owner_address)) {
            msg = msg.store_slice(calculate_user_jetton_wallet_address(owner_address, my_address(), storage::jetton_wallet_code));
        } else {
            msg = msg.store_uint(0, 2); ;; addr_none
        }
        send_raw_message(msg.store_maybe_ref(included_address).end_cell(), 64);
        return ();
    }
    throw(er::wrong_op());
}

(int, int, slice, cell, cell) get_jetton_data() method_id {
    load_storage();
    return (
        storage::total_supply, 
        -1, 
        storage::admin_address, 
        storage::content, 
        storage::jetton_wallet_code
    );
}

slice get_wallet_address(slice admin_address) method_id {
    load_storage();
    return calculate_user_jetton_wallet_address(
        admin_address,
        my_address(),
        storage::jetton_wallet_code
    );
}

(int, slice, slice, cell) get_vault_data() method_id {
    load_storage();
    return (
        storage::stopped,
        storage::jetton_master,
        storage::jetton_wallet,
        storage::dict_swaps_info
    );
}

;; Debug getter to retrieve SwapsInfoID details
(int, slice, int, slice, int, int, int, int) get_swaps_info_debug(int query_id) method_id {
    load_storage();
    (slice swap_id, int ethereum_user, slice ton_user, int amount, int creation_timestamp, int deadline, int status) = load_swaps_info(query_id);
    int found = ~ equal_slices(ton_user, addr_none());
    return (
        found,
        swap_id,
        ethereum_user,
        ton_user,
        amount,
        creation_timestamp,
        deadline,
        status
    );
}